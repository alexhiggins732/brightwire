//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-24330188
// Cuda compilation tools, release 9.2, V9.2.148
// Based on LLVM 3.4svn
//

.version 6.2
.target sm_35
.address_size 64

	// .globl	PointwiseMultiply
// _ZZ13FindMinAndMaxE5block has been demoted
// _ZZ7FindSumE5block has been demoted
// _ZZ10FindStdDevE5block has been demoted

.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd2, [PointwiseMultiply_param_1];
	ld.param.u32 	%r2, [PointwiseMultiply_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd5];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB0_2:
	ret;
}

	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [PointwiseDivide_param_0];
	ld.param.u64 	%rd2, [PointwiseDivide_param_1];
	ld.param.u32 	%r2, [PointwiseDivide_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	add.s64 	%rd7, %rd3, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;

BB1_2:
	ret;
}

	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Sqrt_param_0];
	ld.param.u64 	%rd2, [Sqrt_param_1];
	ld.param.u32 	%r2, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB2_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f4;

BB2_2:
	ret;
}

	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [AddInPlace_param_0];
	ld.param.u64 	%rd2, [AddInPlace_param_1];
	ld.param.u32 	%r2, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB3_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f3, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f4, [%rd7];
	mul.ftz.f32 	%f5, %f4, %f2;
	fma.rn.ftz.f32 	%f6, %f3, %f1, %f5;
	st.global.f32 	[%rd5], %f6;

BB3_2:
	ret;
}

	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SubtractInPlace_param_0];
	ld.param.u64 	%rd2, [SubtractInPlace_param_1];
	ld.param.u32 	%r2, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB4_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f3, [%rd5];
	mul.ftz.f32 	%f4, %f3, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f5, [%rd7];
	mul.ftz.f32 	%f6, %f5, %f2;
	sub.ftz.f32 	%f7, %f4, %f6;
	st.global.f32 	[%rd5], %f7;

BB4_2:
	ret;
}

	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachRow_param_0];
	ld.param.u64 	%rd2, [AddToEachRow_param_1];
	ld.param.u32 	%r3, [AddToEachRow_param_2];
	ld.param.u32 	%r4, [AddToEachRow_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB5_2;
	bra.uni 	BB5_1;

BB5_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r2, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB5_2:
	ret;
}

	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachColumn_param_0];
	ld.param.u64 	%rd2, [AddToEachColumn_param_1];
	ld.param.u32 	%r3, [AddToEachColumn_param_2];
	ld.param.u32 	%r4, [AddToEachColumn_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB6_2;
	bra.uni 	BB6_1;

BB6_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB6_2:
	ret;
}

	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [TanH_param_0];
	ld.param.u64 	%rd2, [TanH_param_1];
	ld.param.u32 	%r2, [TanH_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB7_5;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p2, %f2, 0f3F0CCCCD;
	@%p2 bra 	BB7_3;
	bra.uni 	BB7_2;

BB7_3:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f32, %f31, %f30, %p4;
	bra.uni 	BB7_4;

BB7_2:
	add.ftz.f32 	%f8, %f2, %f2;
	mul.ftz.f32 	%f9, %f8, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f10, %f9;
	mov.f32 	%f11, 0fBF317200;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f8;
	mov.f32 	%f13, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f14, %f10, %f13, %f12;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f16, %f15;
	ex2.approx.ftz.f32 	%f17, %f10;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f7, %f16, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f6,%f7;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f18;
	mov.b32 	 %r6, %f20;
	setp.ltu.ftz.f32	%p3, %f2, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f32, %r10;

BB7_4:
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd8, %rd6, %rd4;
	st.global.f32 	[%rd8], %f32;

BB7_5:
	ret;
}

	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [TanHDerivative_param_0];
	ld.param.u64 	%rd2, [TanHDerivative_param_1];
	ld.param.u32 	%r2, [TanHDerivative_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB8_5;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p2, %f2, 0f3F0CCCCD;
	@%p2 bra 	BB8_3;
	bra.uni 	BB8_2;

BB8_3:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f35, %f31, %f30, %p4;
	bra.uni 	BB8_4;

BB8_2:
	add.ftz.f32 	%f8, %f2, %f2;
	mul.ftz.f32 	%f9, %f8, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f10, %f9;
	mov.f32 	%f11, 0fBF317200;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f8;
	mov.f32 	%f13, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f14, %f10, %f13, %f12;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f16, %f15;
	ex2.approx.ftz.f32 	%f17, %f10;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f7, %f16, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f6,%f7;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f18;
	mov.b32 	 %r6, %f20;
	setp.ltu.ftz.f32	%p3, %f2, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p3;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f35, %r10;

BB8_4:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.ftz.f32 	%f32, %f35, %f35;
	mov.f32 	%f33, 0f3F800000;
	sub.ftz.f32 	%f34, %f33, %f32;
	add.s64 	%rd8, %rd6, %rd4;
	st.global.f32 	[%rd8], %f34;

BB8_5:
	ret;
}

	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Sigmoid_param_0];
	ld.param.u64 	%rd2, [Sigmoid_param_1];
	ld.param.u32 	%r2, [Sigmoid_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB9_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB9_2:
	ret;
}

	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd2, [SigmoidDerivative_param_1];
	ld.param.u32 	%r2, [SigmoidDerivative_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB10_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	mov.f32 	%f6, 0f3F800000;
	sub.ftz.f32 	%f7, %f6, %f5;
	mul.ftz.f32 	%f8, %f5, %f7;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f8;

BB10_2:
	ret;
}

	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [RELU_param_0];
	ld.param.u64 	%rd2, [RELU_param_1];
	ld.param.u32 	%r2, [RELU_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB11_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, %f1, 0f00000000, %p2;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f2;

BB11_2:
	ret;
}

	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [RELUDerivative_param_0];
	ld.param.u64 	%rd2, [RELUDerivative_param_1];
	ld.param.u32 	%r2, [RELUDerivative_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB12_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f00000000, %p2;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f2;

BB12_2:
	ret;
}

	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [LeakyRELU_param_0];
	ld.param.u64 	%rd2, [LeakyRELU_param_1];
	ld.param.u32 	%r2, [LeakyRELU_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB13_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	mul.ftz.f32 	%f2, %f1, 0f3C23D70A;
	selp.f32	%f3, %f1, %f2, %p2;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f3;

BB13_2:
	ret;
}

	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd2, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r2, [LeakyRELUDerivative_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB14_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f3C23D70A, %p2;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f2;

BB14_2:
	ret;
}

	// .globl	Reverse
.visible .entry Reverse(
	.param .u64 Reverse_param_0,
	.param .u64 Reverse_param_1,
	.param .u32 Reverse_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [Reverse_param_0];
	ld.param.u64 	%rd2, [Reverse_param_1];
	ld.param.u32 	%r2, [Reverse_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB15_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	add.s32 	%r6, %r2, -1;
	sub.s32 	%r7, %r6, %r1;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r7, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB15_2:
	ret;
}

	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<29>;
	.reg .b32 	%r<34>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd3, [SumRows_param_0];
	ld.param.u64 	%rd2, [SumRows_param_1];
	ld.param.u32 	%r17, [SumRows_param_2];
	ld.param.u32 	%r18, [SumRows_param_3];
	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r17;
	@%p1 bra 	BB16_12;

	mov.f32 	%f28, 0f00000000;
	setp.lt.s32	%p2, %r18, 1;
	@%p2 bra 	BB16_11;

	and.b32  	%r22, %r18, 3;
	mov.f32 	%f28, 0f00000000;
	mov.u32 	%r31, 0;
	setp.eq.s32	%p3, %r22, 0;
	@%p3 bra 	BB16_8;

	setp.eq.s32	%p4, %r22, 1;
	@%p4 bra 	BB16_7;

	setp.eq.s32	%p5, %r22, 2;
	@%p5 bra 	BB16_6;

	mul.wide.s32 	%rd4, %r4, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f14, [%rd5];
	add.ftz.f32 	%f28, %f14, 0f00000000;
	mov.u32 	%r31, 1;

BB16_6:
	neg.s32 	%r24, %r31;
	and.b32  	%r25, %r24, %r17;
	add.s32 	%r26, %r25, %r4;
	mul.wide.s32 	%rd6, %r26, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f15, [%rd7];
	add.ftz.f32 	%f28, %f28, %f15;
	add.s32 	%r31, %r31, 1;

BB16_7:
	mad.lo.s32 	%r27, %r31, %r17, %r4;
	mul.wide.s32 	%rd8, %r27, 4;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f16, [%rd9];
	add.ftz.f32 	%f28, %f28, %f16;
	add.s32 	%r31, %r31, 1;

BB16_8:
	setp.lt.u32	%p6, %r18, 4;
	@%p6 bra 	BB16_11;

	shl.b32 	%r10, %r17, 2;
	mad.lo.s32 	%r32, %r31, %r17, %r4;

BB16_10:
	mul.wide.s32 	%rd10, %r32, 4;
	add.s64 	%rd11, %rd1, %rd10;
	ld.global.f32 	%f17, [%rd11];
	add.ftz.f32 	%f18, %f28, %f17;
	cvt.s64.s32	%rd12, %r10;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f19, [%rd13];
	add.ftz.f32 	%f20, %f18, %f19;
	add.s64 	%rd14, %rd13, %rd12;
	ld.global.f32 	%f21, [%rd14];
	add.ftz.f32 	%f22, %f20, %f21;
	add.s64 	%rd15, %rd14, %rd12;
	ld.global.f32 	%f23, [%rd15];
	add.ftz.f32 	%f28, %f22, %f23;
	add.s32 	%r32, %r32, %r10;
	add.s32 	%r31, %r31, 4;
	setp.lt.s32	%p7, %r31, %r18;
	@%p7 bra 	BB16_10;

BB16_11:
	cvta.to.global.u64 	%rd16, %rd2;
	mul.wide.s32 	%rd17, %r4, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f28;

BB16_12:
	ret;
}

	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<29>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd6, [SumColumns_param_0];
	ld.param.u64 	%rd5, [SumColumns_param_1];
	ld.param.u32 	%r13, [SumColumns_param_2];
	ld.param.u32 	%r14, [SumColumns_param_3];
	cvta.to.global.u64 	%rd1, %rd6;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r14;
	@%p1 bra 	BB17_12;

	mov.f32 	%f28, 0f00000000;
	setp.lt.s32	%p2, %r13, 1;
	@%p2 bra 	BB17_11;

	mul.lo.s32 	%r5, %r4, %r13;
	and.b32  	%r18, %r13, 3;
	mov.f32 	%f28, 0f00000000;
	mov.u32 	%r26, 0;
	setp.eq.s32	%p3, %r18, 0;
	@%p3 bra 	BB17_8;

	setp.eq.s32	%p4, %r18, 1;
	@%p4 bra 	BB17_7;

	setp.eq.s32	%p5, %r18, 2;
	@%p5 bra 	BB17_6;

	mul.wide.s32 	%rd7, %r5, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f14, [%rd8];
	add.ftz.f32 	%f28, %f14, 0f00000000;
	mov.u32 	%r26, 1;

BB17_6:
	add.s32 	%r20, %r26, %r5;
	mul.wide.s32 	%rd9, %r20, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.f32 	%f15, [%rd10];
	add.ftz.f32 	%f28, %f28, %f15;
	add.s32 	%r26, %r26, 1;

BB17_7:
	add.s32 	%r21, %r26, %r5;
	mul.wide.s32 	%rd11, %r21, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.f32 	%f16, [%rd12];
	add.ftz.f32 	%f28, %f28, %f16;
	add.s32 	%r26, %r26, 1;

BB17_8:
	setp.lt.u32	%p6, %r13, 4;
	@%p6 bra 	BB17_11;

	mad.lo.s32 	%r23, %r13, %r4, %r26;
	mul.wide.s32 	%rd13, %r23, 4;
	add.s64 	%rd17, %rd1, %rd13;

BB17_10:
	ld.global.f32 	%f17, [%rd17];
	add.ftz.f32 	%f18, %f28, %f17;
	ld.global.f32 	%f19, [%rd17+4];
	add.ftz.f32 	%f20, %f18, %f19;
	ld.global.f32 	%f21, [%rd17+8];
	add.ftz.f32 	%f22, %f20, %f21;
	ld.global.f32 	%f23, [%rd17+12];
	add.ftz.f32 	%f28, %f22, %f23;
	add.s64 	%rd17, %rd17, 16;
	add.s32 	%r26, %r26, 4;
	setp.lt.s32	%p7, %r26, %r13;
	@%p7 bra 	BB17_10;

BB17_11:
	cvta.to.global.u64 	%rd14, %rd5;
	mul.wide.s32 	%rd15, %r4, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f28;

BB17_12:
	ret;
}

	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [MemClear_param_0];
	ld.param.u32 	%r4, [MemClear_param_1];
	ld.param.u32 	%r2, [MemClear_param_2];
	ld.param.u32 	%r3, [MemClear_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB18_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mad.lo.s32 	%r8, %r1, %r3, %r2;
	mul.wide.s32 	%rd3, %r8, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd4], %r9;

BB18_2:
	ret;
}

	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3
)
{
	.reg .pred 	%p<24>;
	.reg .f32 	%f<60>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ13FindMinAndMaxE5block[1024];

	ld.param.u64 	%rd1, [FindMinAndMax_param_0];
	ld.param.u32 	%r17, [FindMinAndMax_param_1];
	ld.param.u64 	%rd2, [FindMinAndMax_param_2];
	ld.param.u64 	%rd3, [FindMinAndMax_param_3];
	mov.u32 	%r18, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r18, %r1;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r4, %r2, %r3;
	mov.f32 	%f47, 0f00000000;
	setp.ge.s32	%p1, %r4, %r17;
	@%p1 bra 	BB19_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f47, [%rd6];

BB19_2:
	shl.b32 	%r19, %r3, 2;
	mov.u32 	%r20, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r21, %r20, %r19;
	st.shared.f32 	[%r21], %f47;
	bar.sync 	0;
	setp.ne.s32	%p2, %r3, 0;
	@%p2 bra 	BB19_15;

	sub.s32 	%r22, %r17, %r4;
	mov.u32 	%r23, 256;
	min.s32 	%r5, %r22, %r23;
	mov.f32 	%f59, 0f7F7FFFFF;
	mov.f32 	%f58, 0f00800000;
	setp.lt.s32	%p3, %r5, 1;
	@%p3 bra 	BB19_14;

	add.s32 	%r28, %r2, -1;
	sub.s32 	%r29, %r28, %r17;
	setp.gt.s32	%p4, %r29, -257;
	not.b32 	%r30, %r29;
	selp.b32	%r6, %r30, 256, %p4;
	and.b32  	%r27, %r6, 3;
	mov.f32 	%f49, 0f7F7FFFFF;
	mov.f32 	%f48, 0f00800000;
	mov.u32 	%r40, 0;
	mov.f32 	%f59, 0f00000000;
	setp.eq.s32	%p5, %r27, 0;
	@%p5 bra 	BB19_5;

	setp.eq.s32	%p6, %r27, 1;
	@%p6 bra 	BB19_10;

	setp.eq.s32	%p7, %r27, 2;
	@%p7 bra 	BB19_9;

	ld.shared.f32 	%f34, [_ZZ13FindMinAndMaxE5block];
	setp.gt.ftz.f32	%p8, %f34, 0f00800000;
	selp.f32	%f48, %f34, 0f00800000, %p8;
	setp.lt.ftz.f32	%p9, %f34, 0f7F7FFFFF;
	selp.f32	%f49, %f34, 0f7F7FFFFF, %p9;
	mov.u32 	%r40, 1;

BB19_9:
	shl.b32 	%r32, %r40, 2;
	add.s32 	%r34, %r20, %r32;
	ld.shared.f32 	%f35, [%r34];
	setp.gt.ftz.f32	%p10, %f35, %f48;
	selp.f32	%f48, %f35, %f48, %p10;
	setp.lt.ftz.f32	%p11, %f35, %f49;
	selp.f32	%f49, %f35, %f49, %p11;
	add.s32 	%r40, %r40, 1;

BB19_10:
	shl.b32 	%r35, %r40, 2;
	add.s32 	%r37, %r20, %r35;
	ld.shared.f32 	%f36, [%r37];
	setp.gt.ftz.f32	%p12, %f36, %f48;
	selp.f32	%f48, %f36, %f48, %p12;
	setp.lt.ftz.f32	%p13, %f36, %f49;
	selp.f32	%f49, %f36, %f49, %p13;
	add.s32 	%r40, %r40, 1;
	mov.f32 	%f59, %f49;
	mov.f32 	%f58, %f48;
	bra.uni 	BB19_11;

BB19_5:
	mov.f32 	%f58, %f59;

BB19_11:
	setp.lt.u32	%p14, %r6, 4;
	@%p14 bra 	BB19_14;

	shl.b32 	%r38, %r40, 2;
	add.s32 	%r43, %r20, %r38;
	mov.f32 	%f58, %f48;
	mov.f32 	%f59, %f49;

BB19_13:
	ld.shared.f32 	%f37, [%r43];
	setp.gt.ftz.f32	%p15, %f37, %f58;
	selp.f32	%f38, %f37, %f58, %p15;
	setp.lt.ftz.f32	%p16, %f37, %f59;
	selp.f32	%f39, %f37, %f59, %p16;
	ld.shared.f32 	%f40, [%r43+4];
	setp.gt.ftz.f32	%p17, %f40, %f38;
	selp.f32	%f41, %f40, %f38, %p17;
	setp.lt.ftz.f32	%p18, %f40, %f39;
	selp.f32	%f42, %f40, %f39, %p18;
	ld.shared.f32 	%f43, [%r43+8];
	setp.gt.ftz.f32	%p19, %f43, %f41;
	selp.f32	%f44, %f43, %f41, %p19;
	setp.lt.ftz.f32	%p20, %f43, %f42;
	selp.f32	%f45, %f43, %f42, %p20;
	ld.shared.f32 	%f46, [%r43+12];
	setp.gt.ftz.f32	%p21, %f46, %f44;
	selp.f32	%f58, %f46, %f44, %p21;
	setp.lt.ftz.f32	%p22, %f46, %f45;
	selp.f32	%f59, %f46, %f45, %p22;
	add.s32 	%r43, %r43, 16;
	add.s32 	%r40, %r40, 4;
	setp.lt.s32	%p23, %r40, %r5;
	@%p23 bra 	BB19_13;

BB19_14:
	cvta.to.global.u64 	%rd7, %rd3;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f59;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f58;

BB19_15:
	ret;
}

	// .globl	FindSum
.visible .entry FindSum(
	.param .u64 FindSum_param_0,
	.param .u32 FindSum_param_1,
	.param .u64 FindSum_param_2
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ7FindSumE5block[1024];

	ld.param.u64 	%rd1, [FindSum_param_0];
	ld.param.u32 	%r15, [FindSum_param_1];
	ld.param.u64 	%rd2, [FindSum_param_2];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r16, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r15;
	@%p1 bra 	BB20_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f10, [%rd5];
	shl.b32 	%r17, %r2, 2;
	mov.u32 	%r18, _ZZ7FindSumE5block;
	add.s32 	%r19, %r18, %r17;
	st.shared.f32 	[%r19], %f10;

BB20_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB20_14;

	shl.b32 	%r20, %r1, 8;
	sub.s32 	%r21, %r15, %r20;
	mov.u32 	%r22, 256;
	min.s32 	%r4, %r21, %r22;
	mov.f32 	%f29, 0f00000000;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB20_13;

	and.b32  	%r26, %r4, 3;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r38, 0;
	setp.eq.s32	%p4, %r26, 0;
	@%p4 bra 	BB20_10;

	setp.eq.s32	%p5, %r26, 1;
	@%p5 bra 	BB20_9;

	setp.eq.s32	%p6, %r26, 2;
	@%p6 bra 	BB20_8;

	ld.shared.f32 	%f15, [_ZZ7FindSumE5block];
	add.ftz.f32 	%f29, %f15, 0f00000000;
	mov.u32 	%r38, 1;

BB20_8:
	shl.b32 	%r28, %r38, 2;
	mov.u32 	%r29, _ZZ7FindSumE5block;
	add.s32 	%r30, %r29, %r28;
	ld.shared.f32 	%f16, [%r30];
	add.ftz.f32 	%f29, %f29, %f16;
	add.s32 	%r38, %r38, 1;

BB20_9:
	shl.b32 	%r31, %r38, 2;
	mov.u32 	%r32, _ZZ7FindSumE5block;
	add.s32 	%r33, %r32, %r31;
	ld.shared.f32 	%f17, [%r33];
	add.ftz.f32 	%f29, %f29, %f17;
	add.s32 	%r38, %r38, 1;

BB20_10:
	setp.lt.u32	%p7, %r4, 4;
	@%p7 bra 	BB20_13;

	shl.b32 	%r34, %r38, 2;
	mov.u32 	%r35, _ZZ7FindSumE5block;
	add.s32 	%r39, %r35, %r34;

BB20_12:
	ld.shared.f32 	%f18, [%r39];
	add.ftz.f32 	%f19, %f29, %f18;
	ld.shared.f32 	%f20, [%r39+4];
	add.ftz.f32 	%f21, %f19, %f20;
	ld.shared.f32 	%f22, [%r39+8];
	add.ftz.f32 	%f23, %f21, %f22;
	ld.shared.f32 	%f24, [%r39+12];
	add.ftz.f32 	%f29, %f23, %f24;
	add.s32 	%r39, %r39, 16;
	add.s32 	%r38, %r38, 4;
	setp.lt.s32	%p8, %r38, %r4;
	@%p8 bra 	BB20_12;

BB20_13:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f29;

BB20_14:
	ret;
}

	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<38>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ10FindStdDevE5block[1024];

	ld.param.u64 	%rd1, [FindStdDev_param_0];
	ld.param.u32 	%r15, [FindStdDev_param_1];
	ld.param.f32 	%f10, [FindStdDev_param_2];
	ld.param.u64 	%rd2, [FindStdDev_param_3];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r16, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r15;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f11, [%rd5];
	shl.b32 	%r17, %r2, 2;
	mov.u32 	%r18, _ZZ10FindStdDevE5block;
	add.s32 	%r19, %r18, %r17;
	st.shared.f32 	[%r19], %f11;

BB21_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB21_14;

	shl.b32 	%r20, %r1, 8;
	sub.s32 	%r21, %r15, %r20;
	mov.u32 	%r22, 256;
	min.s32 	%r4, %r21, %r22;
	mov.f32 	%f37, 0f00000000;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB21_13;

	and.b32  	%r26, %r4, 3;
	mov.f32 	%f37, 0f00000000;
	mov.u32 	%r38, 0;
	setp.eq.s32	%p4, %r26, 0;
	@%p4 bra 	BB21_10;

	setp.eq.s32	%p5, %r26, 1;
	@%p5 bra 	BB21_9;

	setp.eq.s32	%p6, %r26, 2;
	@%p6 bra 	BB21_8;

	ld.shared.f32 	%f16, [_ZZ10FindStdDevE5block];
	sub.ftz.f32 	%f17, %f16, %f10;
	fma.rn.ftz.f32 	%f37, %f17, %f17, 0f00000000;
	mov.u32 	%r38, 1;

BB21_8:
	shl.b32 	%r28, %r38, 2;
	mov.u32 	%r29, _ZZ10FindStdDevE5block;
	add.s32 	%r30, %r29, %r28;
	ld.shared.f32 	%f18, [%r30];
	sub.ftz.f32 	%f19, %f18, %f10;
	fma.rn.ftz.f32 	%f37, %f19, %f19, %f37;
	add.s32 	%r38, %r38, 1;

BB21_9:
	shl.b32 	%r31, %r38, 2;
	mov.u32 	%r32, _ZZ10FindStdDevE5block;
	add.s32 	%r33, %r32, %r31;
	ld.shared.f32 	%f20, [%r33];
	sub.ftz.f32 	%f21, %f20, %f10;
	fma.rn.ftz.f32 	%f37, %f21, %f21, %f37;
	add.s32 	%r38, %r38, 1;

BB21_10:
	setp.lt.u32	%p7, %r4, 4;
	@%p7 bra 	BB21_13;

	shl.b32 	%r34, %r38, 2;
	mov.u32 	%r35, _ZZ10FindStdDevE5block;
	add.s32 	%r39, %r35, %r34;

BB21_12:
	ld.shared.f32 	%f22, [%r39];
	sub.ftz.f32 	%f23, %f22, %f10;
	fma.rn.ftz.f32 	%f24, %f23, %f23, %f37;
	ld.shared.f32 	%f25, [%r39+4];
	sub.ftz.f32 	%f26, %f25, %f10;
	fma.rn.ftz.f32 	%f27, %f26, %f26, %f24;
	ld.shared.f32 	%f28, [%r39+8];
	sub.ftz.f32 	%f29, %f28, %f10;
	fma.rn.ftz.f32 	%f30, %f29, %f29, %f27;
	ld.shared.f32 	%f31, [%r39+12];
	sub.ftz.f32 	%f32, %f31, %f10;
	fma.rn.ftz.f32 	%f37, %f32, %f32, %f30;
	add.s32 	%r39, %r39, 16;
	add.s32 	%r38, %r38, 4;
	setp.lt.s32	%p8, %r38, %r4;
	@%p8 bra 	BB21_12;

BB21_13:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f37;

BB21_14:
	ret;
}

	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Constrain_param_0];
	ld.param.u32 	%r2, [Constrain_param_1];
	ld.param.f32 	%f2, [Constrain_param_2];
	ld.param.f32 	%f3, [Constrain_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB22_5;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.geu.ftz.f32	%p2, %f1, %f2;
	@%p2 bra 	BB22_3;

	st.global.f32 	[%rd1], %f2;

BB22_3:
	setp.leu.ftz.f32	%p3, %f1, %f3;
	@%p3 bra 	BB22_5;

	st.global.f32 	[%rd1], %f3;

BB22_5:
	ret;
}

	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Pow_param_0];
	ld.param.u64 	%rd2, [Pow_param_1];
	ld.param.u32 	%r2, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB23_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB23_2:
	ret;
}

	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [Diagonal_param_0];
	ld.param.u64 	%rd2, [Diagonal_param_1];
	ld.param.u32 	%r2, [Diagonal_param_2];
	ld.param.u32 	%r3, [Diagonal_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.lt.s32	%p1, %r1, %r2;
	setp.lt.s32	%p2, %r1, %r3;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB24_2;
	bra.uni 	BB24_1;

BB24_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r7, %r1, %r2, %r1;
	mul.wide.s32 	%rd4, %r7, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB24_2:
	ret;
}

	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [L1Regularisation_param_0];
	ld.param.u32 	%r2, [L1Regularisation_param_1];
	ld.param.f32 	%f4, [L1Regularisation_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB25_4;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.gt.ftz.f32	%p2, %f1, 0f00000000;
	mov.f32 	%f8, 0f3F800000;
	@%p2 bra 	BB25_3;

	setp.lt.ftz.f32	%p3, %f1, 0f00000000;
	selp.s32	%r6, -1, 0, %p3;
	cvt.rn.f32.s32	%f8, %r6;

BB25_3:
	mul.ftz.f32 	%f6, %f8, %f4;
	sub.ftz.f32 	%f7, %f1, %f6;
	st.global.f32 	[%rd1], %f7;

BB25_4:
	ret;
}

	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r3, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r4, [PointwiseDivideRows_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB26_2;
	bra.uni 	BB26_1;

BB26_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB26_2:
	ret;
}

	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r3, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r4, [PointwiseDivideColumns_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB27_2;
	bra.uni 	BB27_1;

BB27_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB27_2:
	ret;
}

	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [SplitRows_param_0];
	ld.param.u64 	%rd2, [SplitRows_param_1];
	ld.param.u64 	%rd3, [SplitRows_param_2];
	ld.param.u32 	%r4, [SplitRows_param_3];
	ld.param.u32 	%r6, [SplitRows_param_4];
	ld.param.u32 	%r5, [SplitRows_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB28_4;
	bra.uni 	BB28_1;

BB28_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r3, %r2, %r4, %r1;
	mul.wide.s32 	%rd5, %r3, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.lt.s32	%p4, %r2, %r5;
	@%p4 bra 	BB28_3;
	bra.uni 	BB28_2;

BB28_3:
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd12, %rd10, %rd5;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB28_4;

BB28_2:
	cvta.to.global.u64 	%rd7, %rd3;
	sub.s32 	%r13, %r2, %r5;
	mad.lo.s32 	%r14, %r13, %r4, %r1;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f1;

BB28_4:
	ret;
}

	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [SplitColumns_param_0];
	ld.param.u64 	%rd2, [SplitColumns_param_1];
	ld.param.u64 	%rd3, [SplitColumns_param_2];
	ld.param.u32 	%r3, [SplitColumns_param_3];
	ld.param.u32 	%r5, [SplitColumns_param_4];
	ld.param.u32 	%r4, [SplitColumns_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r2, %r9, %r10, %r11;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB29_4;
	bra.uni 	BB29_1;

BB29_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r12, %r2, %r3, %r1;
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB29_3;
	bra.uni 	BB29_2;

BB29_3:
	cvta.to.global.u64 	%rd10, %rd2;
	mad.lo.s32 	%r16, %r2, %r4, %r1;
	mul.wide.s32 	%rd11, %r16, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB29_4;

BB29_2:
	cvta.to.global.u64 	%rd7, %rd3;
	sub.s32 	%r13, %r1, %r4;
	sub.s32 	%r14, %r3, %r4;
	mad.lo.s32 	%r15, %r2, %r14, %r13;
	mul.wide.s32 	%rd8, %r15, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f1;

BB29_4:
	ret;
}

	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatColumns_param_0];
	ld.param.u64 	%rd5, [ConcatColumns_param_1];
	ld.param.u64 	%rd6, [ConcatColumns_param_2];
	ld.param.u32 	%r3, [ConcatColumns_param_3];
	ld.param.u32 	%r6, [ConcatColumns_param_4];
	ld.param.u32 	%r4, [ConcatColumns_param_5];
	ld.param.u32 	%r5, [ConcatColumns_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB30_5;
	bra.uni 	BB30_1;

BB30_1:
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB30_3;
	bra.uni 	BB30_2;

BB30_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mad.lo.s32 	%r15, %r2, %r4, %r1;
	mul.wide.s32 	%rd10, %r15, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB30_4;

BB30_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r1, %r4;
	mad.lo.s32 	%r14, %r2, %r5, %r13;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB30_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mad.lo.s32 	%r16, %r2, %r3, %r1;
	mul.wide.s32 	%rd12, %r16, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB30_5:
	ret;
}

	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatRows_param_0];
	ld.param.u64 	%rd5, [ConcatRows_param_1];
	ld.param.u64 	%rd6, [ConcatRows_param_2];
	ld.param.u32 	%r4, [ConcatRows_param_3];
	ld.param.u32 	%r6, [ConcatRows_param_4];
	ld.param.u32 	%r5, [ConcatRows_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB31_5;
	bra.uni 	BB31_1;

BB31_1:
	setp.lt.s32	%p4, %r2, %r5;
	mad.lo.s32 	%r3, %r2, %r4, %r1;
	@%p4 bra 	BB31_3;
	bra.uni 	BB31_2;

BB31_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r3, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB31_4;

BB31_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r2, %r5;
	mad.lo.s32 	%r14, %r13, %r4, %r1;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB31_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mul.wide.s32 	%rd12, %r3, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB31_5:
	ret;
}

	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [EuclideanDistance_param_0];
	ld.param.u64 	%rd2, [EuclideanDistance_param_1];
	ld.param.u64 	%rd3, [EuclideanDistance_param_2];
	ld.param.u32 	%r2, [EuclideanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB32_2:
	ret;
}

	// .globl	MultiEuclideanDistance
.visible .entry MultiEuclideanDistance(
	.param .u64 MultiEuclideanDistance_param_0,
	.param .u64 MultiEuclideanDistance_param_1,
	.param .u64 MultiEuclideanDistance_param_2,
	.param .u32 MultiEuclideanDistance_param_3,
	.param .u32 MultiEuclideanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiEuclideanDistance_param_0];
	ld.param.u64 	%rd2, [MultiEuclideanDistance_param_1];
	ld.param.u64 	%rd3, [MultiEuclideanDistance_param_2];
	ld.param.u32 	%r3, [MultiEuclideanDistance_param_3];
	ld.param.u32 	%r4, [MultiEuclideanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB33_2;
	bra.uni 	BB33_1;

BB33_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB33_2:
	ret;
}

	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [ManhattanDistance_param_0];
	ld.param.u64 	%rd2, [ManhattanDistance_param_1];
	ld.param.u64 	%rd3, [ManhattanDistance_param_2];
	ld.param.u32 	%r2, [ManhattanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB34_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB34_2:
	ret;
}

	// .globl	MultiManhattanDistance
.visible .entry MultiManhattanDistance(
	.param .u64 MultiManhattanDistance_param_0,
	.param .u64 MultiManhattanDistance_param_1,
	.param .u64 MultiManhattanDistance_param_2,
	.param .u32 MultiManhattanDistance_param_3,
	.param .u32 MultiManhattanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiManhattanDistance_param_0];
	ld.param.u64 	%rd2, [MultiManhattanDistance_param_1];
	ld.param.u64 	%rd3, [MultiManhattanDistance_param_2];
	ld.param.u32 	%r3, [MultiManhattanDistance_param_3];
	ld.param.u32 	%r4, [MultiManhattanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB35_2;
	bra.uni 	BB35_1;

BB35_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB35_2:
	ret;
}

	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Abs_param_0];
	ld.param.u64 	%rd2, [Abs_param_1];
	ld.param.u32 	%r2, [Abs_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB36_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB36_2:
	ret;
}

	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Log_param_0];
	ld.param.u64 	%rd2, [Log_param_1];
	ld.param.u32 	%r2, [Log_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB37_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB37_2:
	ret;
}

	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [Normalise_param_0];
	ld.param.u32 	%r2, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB38_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;

BB38_2:
	ret;
}

	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SoftmaxVector_param_0];
	ld.param.u64 	%rd2, [SoftmaxVector_param_1];
	ld.param.u32 	%r2, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB39_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB39_2:
	ret;
}

	// .globl	VectorAdd
.visible .entry VectorAdd(
	.param .u64 VectorAdd_param_0,
	.param .u32 VectorAdd_param_1,
	.param .f32 VectorAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [VectorAdd_param_0];
	ld.param.u32 	%r2, [VectorAdd_param_1];
	ld.param.f32 	%f1, [VectorAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB40_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB40_2:
	ret;
}

	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd2, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd3, [VectorCopyRandom_param_2];
	ld.param.u32 	%r2, [VectorCopyRandom_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB41_2;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.u32 	%r6, [%rd6];
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r6, 4;
	add.s64 	%rd9, %rd7, %rd8;
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd5;
	ld.global.f32 	%f1, [%rd11];
	ld.global.f32 	%f2, [%rd9];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;

BB41_2:
	ret;
}

	// .globl	CopyToMatrix
.visible .entry CopyToMatrix(
	.param .u64 CopyToMatrix_param_0,
	.param .u64 CopyToMatrix_param_1,
	.param .u32 CopyToMatrix_param_2,
	.param .u32 CopyToMatrix_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [CopyToMatrix_param_0];
	ld.param.u64 	%rd2, [CopyToMatrix_param_1];
	ld.param.u32 	%r3, [CopyToMatrix_param_2];
	ld.param.u32 	%r4, [CopyToMatrix_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB42_2;
	bra.uni 	BB42_1;

BB42_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r2, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r11, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB42_2:
	ret;
}

	// .globl	VectorSplit
.visible .entry VectorSplit(
	.param .u64 VectorSplit_param_0,
	.param .u64 VectorSplit_param_1,
	.param .u32 VectorSplit_param_2,
	.param .u32 VectorSplit_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [VectorSplit_param_0];
	ld.param.u64 	%rd2, [VectorSplit_param_1];
	ld.param.u32 	%r3, [VectorSplit_param_2];
	ld.param.u32 	%r2, [VectorSplit_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB43_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	div.s32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r7, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u64 	%rd9, [%rd8];
	cvta.to.global.u64 	%rd10, %rd9;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB43_2:
	ret;
}

	// .globl	TensorConvertToVector
.visible .entry TensorConvertToVector(
	.param .u64 TensorConvertToVector_param_0,
	.param .u64 TensorConvertToVector_param_1,
	.param .u32 TensorConvertToVector_param_2,
	.param .u32 TensorConvertToVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToVector_param_0];
	ld.param.u64 	%rd2, [TensorConvertToVector_param_1];
	ld.param.u32 	%r2, [TensorConvertToVector_param_2];
	ld.param.u32 	%r3, [TensorConvertToVector_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB44_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.s32 	%r7, %r1, %r2;
	mul.wide.s32 	%rd4, %r7, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd8, %r8, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB44_2:
	ret;
}

	// .globl	TensorConvertToMatrix
.visible .entry TensorConvertToMatrix(
	.param .u64 TensorConvertToMatrix_param_0,
	.param .u64 TensorConvertToMatrix_param_1,
	.param .u32 TensorConvertToMatrix_param_2,
	.param .u32 TensorConvertToMatrix_param_3,
	.param .u32 TensorConvertToMatrix_param_4,
	.param .u32 TensorConvertToMatrix_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToMatrix_param_0];
	ld.param.u64 	%rd2, [TensorConvertToMatrix_param_1];
	ld.param.u32 	%r3, [TensorConvertToMatrix_param_4];
	ld.param.u32 	%r4, [TensorConvertToMatrix_param_5];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB45_2;
	bra.uni 	BB45_1;

BB45_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r2, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r11, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB45_2:
	ret;
}

	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u64 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u32 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7,
	.param .u32 TensorAddPadding_param_8
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [TensorAddPadding_param_0];
	ld.param.u64 	%rd2, [TensorAddPadding_param_1];
	ld.param.u32 	%r8, [TensorAddPadding_param_2];
	ld.param.u32 	%r5, [TensorAddPadding_param_3];
	ld.param.u32 	%r6, [TensorAddPadding_param_5];
	ld.param.u32 	%r9, [TensorAddPadding_param_6];
	ld.param.u32 	%r10, [TensorAddPadding_param_7];
	ld.param.u32 	%r7, [TensorAddPadding_param_8];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r14, %r12, %r11, %r13;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	mul.lo.s32 	%r18, %r10, %r6;
	div.s32 	%r2, %r14, %r18;
	rem.s32 	%r19, %r14, %r18;
	div.s32 	%r3, %r19, %r6;
	rem.s32 	%r4, %r19, %r6;
	setp.lt.s32	%p1, %r2, %r8;
	setp.lt.s32	%p2, %r3, %r10;
	and.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r4, %r7;
	and.pred  	%p5, %p3, %p4;
	setp.ge.s32	%p6, %r1, %r7;
	and.pred  	%p7, %p5, %p6;
	sub.s32 	%r20, %r6, %r7;
	setp.lt.s32	%p8, %r4, %r20;
	and.pred  	%p9, %p7, %p8;
	sub.s32 	%r21, %r9, %r7;
	setp.lt.s32	%p10, %r1, %r21;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB46_2;
	bra.uni 	BB46_1;

BB46_1:
	cvta.to.global.u64 	%rd3, %rd1;
	sub.s32 	%r22, %r1, %r7;
	mul.lo.s32 	%r23, %r22, %r5;
	sub.s32 	%r24, %r23, %r7;
	add.s32 	%r25, %r24, %r4;
	mad.lo.s32 	%r26, %r1, %r6, %r4;
	mul.wide.s32 	%rd4, %r2, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	mul.wide.s32 	%rd12, %r25, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	cvta.to.global.u64 	%rd14, %rd2;
	add.s64 	%rd15, %rd14, %rd4;
	ld.global.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd18, %rd17, %rd8;
	ld.global.u64 	%rd19, [%rd18];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.s32 	%rd21, %r26, 4;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.f32 	[%rd22], %f1;

BB46_2:
	ret;
}

	// .globl	TensorRemovePadding
.visible .entry TensorRemovePadding(
	.param .u64 TensorRemovePadding_param_0,
	.param .u64 TensorRemovePadding_param_1,
	.param .u32 TensorRemovePadding_param_2,
	.param .u32 TensorRemovePadding_param_3,
	.param .u32 TensorRemovePadding_param_4,
	.param .u32 TensorRemovePadding_param_5,
	.param .u32 TensorRemovePadding_param_6,
	.param .u32 TensorRemovePadding_param_7,
	.param .u32 TensorRemovePadding_param_8
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [TensorRemovePadding_param_0];
	ld.param.u64 	%rd2, [TensorRemovePadding_param_1];
	ld.param.u32 	%r8, [TensorRemovePadding_param_2];
	ld.param.u32 	%r5, [TensorRemovePadding_param_3];
	ld.param.u32 	%r9, [TensorRemovePadding_param_4];
	ld.param.u32 	%r6, [TensorRemovePadding_param_5];
	ld.param.u32 	%r10, [TensorRemovePadding_param_7];
	ld.param.u32 	%r7, [TensorRemovePadding_param_8];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r14, %r12, %r11, %r13;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r1, %r15, %r16, %r17;
	mul.lo.s32 	%r18, %r10, %r5;
	div.s32 	%r2, %r14, %r18;
	rem.s32 	%r19, %r14, %r18;
	div.s32 	%r3, %r19, %r5;
	rem.s32 	%r4, %r19, %r5;
	setp.lt.s32	%p1, %r2, %r8;
	setp.lt.s32	%p2, %r3, %r10;
	and.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r1, %r7;
	and.pred  	%p5, %p3, %p4;
	setp.ge.s32	%p6, %r4, %r7;
	and.pred  	%p7, %p5, %p6;
	sub.s32 	%r20, %r5, %r7;
	setp.lt.s32	%p8, %r4, %r20;
	and.pred  	%p9, %p7, %p8;
	sub.s32 	%r21, %r9, %r7;
	setp.lt.s32	%p10, %r1, %r21;
	and.pred  	%p11, %p9, %p10;
	@!%p11 bra 	BB47_2;
	bra.uni 	BB47_1;

BB47_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r22, %r1, %r5, %r4;
	sub.s32 	%r23, %r1, %r7;
	mul.lo.s32 	%r24, %r23, %r6;
	sub.s32 	%r25, %r24, %r7;
	add.s32 	%r26, %r25, %r4;
	mul.wide.s32 	%rd4, %r2, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	mul.wide.s32 	%rd12, %r22, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	cvta.to.global.u64 	%rd14, %rd2;
	add.s64 	%rd15, %rd14, %rd4;
	ld.global.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd18, %rd17, %rd8;
	ld.global.u64 	%rd19, [%rd18];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.s32 	%rd21, %r26, 4;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.f32 	[%rd22], %f1;

BB47_2:
	ret;
}

	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u32 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u64 TensorIm2Col_param_2,
	.param .u64 TensorIm2Col_param_3,
	.param .u64 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9,
	.param .u32 TensorIm2Col_param_10
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<20>;


	ld.param.u32 	%r8, [TensorIm2Col_param_0];
	ld.param.u64 	%rd1, [TensorIm2Col_param_1];
	ld.param.u64 	%rd2, [TensorIm2Col_param_2];
	ld.param.u64 	%rd3, [TensorIm2Col_param_3];
	ld.param.u64 	%rd4, [TensorIm2Col_param_4];
	ld.param.u32 	%r2, [TensorIm2Col_param_5];
	ld.param.u32 	%r3, [TensorIm2Col_param_6];
	ld.param.u32 	%r4, [TensorIm2Col_param_7];
	ld.param.u32 	%r5, [TensorIm2Col_param_8];
	ld.param.u32 	%r6, [TensorIm2Col_param_9];
	ld.param.u32 	%r7, [TensorIm2Col_param_10];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r10, %r9, %r11;
	setp.ge.s32	%p1, %r1, %r8;
	@%p1 bra 	BB48_2;

	cvta.to.global.u64 	%rd5, %rd3;
	div.s32 	%r12, %r1, %r6;
	rem.s32 	%r13, %r12, %r7;
	div.s32 	%r14, %r12, %r7;
	rem.s32 	%r15, %r14, %r5;
	div.s32 	%r16, %r14, %r5;
	mul.wide.s32 	%rd6, %r16, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd7];
	cvt.rzi.ftz.s32.f32	%r17, %f1;
	cvta.to.global.u64 	%rd8, %rd4;
	add.s64 	%rd9, %rd8, %rd6;
	ld.global.f32 	%f2, [%rd9];
	cvt.rzi.ftz.s32.f32	%r18, %f2;
	rem.s32 	%r19, %r1, %r6;
	mad.lo.s32 	%r20, %r19, %r7, %r13;
	mad.lo.s32 	%r21, %r15, %r4, %r20;
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r15, 8;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.u64 	%rd13, [%rd12];
	cvta.to.global.u64 	%rd14, %rd13;
	add.s32 	%r22, %r17, %r19;
	add.s32 	%r23, %r18, %r13;
	mad.lo.s32 	%r24, %r22, %r2, %r23;
	mul.wide.s32 	%rd15, %r24, 4;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.f32 	%f3, [%rd16];
	mad.lo.s32 	%r25, %r21, %r3, %r16;
	cvta.to.global.u64 	%rd17, %rd2;
	mul.wide.s32 	%rd18, %r25, 4;
	add.s64 	%rd19, %rd17, %rd18;
	st.global.f32 	[%rd19], %f3;

BB48_2:
	ret;
}

	// .globl	TensorReverseIm2Col
.visible .entry TensorReverseIm2Col(
	.param .u32 TensorReverseIm2Col_param_0,
	.param .u64 TensorReverseIm2Col_param_1,
	.param .u64 TensorReverseIm2Col_param_2,
	.param .u64 TensorReverseIm2Col_param_3,
	.param .u64 TensorReverseIm2Col_param_4,
	.param .u64 TensorReverseIm2Col_param_5,
	.param .u32 TensorReverseIm2Col_param_6,
	.param .u32 TensorReverseIm2Col_param_7,
	.param .u32 TensorReverseIm2Col_param_8,
	.param .u32 TensorReverseIm2Col_param_9,
	.param .u32 TensorReverseIm2Col_param_10,
	.param .u32 TensorReverseIm2Col_param_11,
	.param .u32 TensorReverseIm2Col_param_12,
	.param .u32 TensorReverseIm2Col_param_13,
	.param .u32 TensorReverseIm2Col_param_14,
	.param .u32 TensorReverseIm2Col_param_15
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<31>;
	.reg .b64 	%rd<35>;


	ld.param.u32 	%r9, [TensorReverseIm2Col_param_0];
	ld.param.u64 	%rd1, [TensorReverseIm2Col_param_1];
	ld.param.u64 	%rd2, [TensorReverseIm2Col_param_2];
	ld.param.u64 	%rd3, [TensorReverseIm2Col_param_3];
	ld.param.u64 	%rd4, [TensorReverseIm2Col_param_4];
	ld.param.u64 	%rd5, [TensorReverseIm2Col_param_5];
	ld.param.u32 	%r2, [TensorReverseIm2Col_param_6];
	ld.param.u32 	%r3, [TensorReverseIm2Col_param_8];
	ld.param.u32 	%r4, [TensorReverseIm2Col_param_10];
	ld.param.u32 	%r5, [TensorReverseIm2Col_param_11];
	ld.param.u32 	%r6, [TensorReverseIm2Col_param_12];
	ld.param.u32 	%r7, [TensorReverseIm2Col_param_13];
	ld.param.u32 	%r8, [TensorReverseIm2Col_param_14];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	setp.ge.s32	%p1, %r1, %r9;
	@%p1 bra 	BB49_2;

	cvta.to.global.u64 	%rd6, %rd4;
	div.s32 	%r13, %r1, %r7;
	rem.s32 	%r14, %r13, %r4;
	div.s32 	%r15, %r13, %r4;
	rem.s32 	%r16, %r15, %r5;
	div.s32 	%r17, %r15, %r5;
	rem.s32 	%r18, %r17, %r3;
	div.s32 	%r19, %r17, %r3;
	mul.wide.s32 	%rd7, %r18, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	cvt.rzi.ftz.s32.f32	%r20, %f1;
	cvta.to.global.u64 	%rd9, %rd5;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.f32 	%f2, [%rd10];
	cvt.rzi.ftz.s32.f32	%r21, %f2;
	rem.s32 	%r22, %r1, %r7;
	mad.lo.s32 	%r23, %r19, %r7, %r22;
	cvta.to.global.u64 	%rd11, %rd1;
	mul.wide.s32 	%rd12, %r19, 8;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.u64 	%rd14, [%rd13];
	cvta.to.global.u64 	%rd15, %rd14;
	cvta.to.global.u64 	%rd16, %rd2;
	add.s64 	%rd17, %rd16, %rd12;
	ld.global.u64 	%rd18, [%rd17];
	cvta.to.global.u64 	%rd19, %rd18;
	mul.wide.s32 	%rd20, %r22, 8;
	add.s64 	%rd21, %rd19, %rd20;
	ld.global.u64 	%rd22, [%rd21];
	cvta.to.global.u64 	%rd23, %rd22;
	cvta.to.global.u64 	%rd24, %rd3;
	mul.wide.s32 	%rd25, %r23, 8;
	add.s64 	%rd26, %rd24, %rd25;
	ld.global.u64 	%rd27, [%rd26];
	cvta.to.global.u64 	%rd28, %rd27;
	div.s32 	%r24, %r20, %r6;
	div.s32 	%r25, %r21, %r6;
	mad.lo.s32 	%r26, %r24, %r2, %r25;
	mul.wide.s32 	%rd29, %r26, 4;
	add.s64 	%rd30, %rd15, %rd29;
	mad.lo.s32 	%r27, %r14, %r5, %r16;
	add.s32 	%r28, %r20, %r14;
	add.s32 	%r29, %r21, %r16;
	mad.lo.s32 	%r30, %r28, %r8, %r29;
	mul.wide.s32 	%rd31, %r27, 4;
	add.s64 	%rd32, %rd23, %rd31;
	ld.global.f32 	%f3, [%rd32];
	ld.global.f32 	%f4, [%rd30];
	mul.ftz.f32 	%f5, %f4, %f3;
	mul.wide.s32 	%rd33, %r30, 4;
	add.s64 	%rd34, %rd28, %rd33;
	st.global.f32 	[%rd34], %f5;

BB49_2:
	ret;
}

	// .globl	SoftmaxDerivative
.visible .entry SoftmaxDerivative(
	.param .u64 SoftmaxDerivative_param_0,
	.param .u64 SoftmaxDerivative_param_1,
	.param .u32 SoftmaxDerivative_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [SoftmaxDerivative_param_0];
	ld.param.u64 	%rd3, [SoftmaxDerivative_param_1];
	ld.param.u32 	%r3, [SoftmaxDerivative_param_2];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	mov.u32 	%r7, %ctaid.y;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %tid.y;
	mad.lo.s32 	%r2, %r7, %r8, %r9;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r3;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB50_4;
	bra.uni 	BB50_1;

BB50_1:
	cvta.to.global.u64 	%rd5, %rd3;
	mad.lo.s32 	%r10, %r2, %r3, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f1, [%rd7];
	mul.wide.s32 	%rd8, %r10, 4;
	add.s64 	%rd2, %rd5, %rd8;
	setp.eq.s32	%p4, %r1, %r2;
	@%p4 bra 	BB50_3;
	bra.uni 	BB50_2;

BB50_3:
	mov.f32 	%f5, 0f3F800000;
	sub.ftz.f32 	%f6, %f5, %f1;
	mul.ftz.f32 	%f7, %f1, %f6;
	st.global.f32 	[%rd2], %f7;
	bra.uni 	BB50_4;

BB50_2:
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.f32 	%f2, [%rd10];
	mul.ftz.f32 	%f3, %f1, %f2;
	neg.ftz.f32 	%f4, %f3;
	st.global.f32 	[%rd2], %f4;

BB50_4:
	ret;
}

	// .globl	Rotate
.visible .entry Rotate(
	.param .u64 Rotate_param_0,
	.param .u64 Rotate_param_1,
	.param .u32 Rotate_param_2,
	.param .u32 Rotate_param_3,
	.param .u32 Rotate_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [Rotate_param_0];
	ld.param.u64 	%rd2, [Rotate_param_1];
	ld.param.u32 	%r3, [Rotate_param_2];
	ld.param.u32 	%r2, [Rotate_param_4];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB51_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	add.s32 	%r7, %r2, %r1;
	add.s32 	%r8, %r7, -1;
	rem.s32 	%r9, %r1, %r2;
	sub.s32 	%r10, %r8, %r9;
	sub.s32 	%r11, %r10, %r9;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB51_2:
	ret;
}

	// .globl	TensorMaxPool
.visible .entry TensorMaxPool(
	.param .u64 TensorMaxPool_param_0,
	.param .u64 TensorMaxPool_param_1,
	.param .u64 TensorMaxPool_param_2,
	.param .u64 TensorMaxPool_param_3,
	.param .u32 TensorMaxPool_param_4,
	.param .u32 TensorMaxPool_param_5,
	.param .u32 TensorMaxPool_param_6,
	.param .u32 TensorMaxPool_param_7,
	.param .u32 TensorMaxPool_param_8,
	.param .u32 TensorMaxPool_param_9,
	.param .u32 TensorMaxPool_param_10,
	.param .u32 TensorMaxPool_param_11
)
{
	.reg .pred 	%p<35>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<112>;
	.reg .b64 	%rd<39>;


	ld.param.u64 	%rd8, [TensorMaxPool_param_0];
	ld.param.u64 	%rd9, [TensorMaxPool_param_1];
	ld.param.u64 	%rd10, [TensorMaxPool_param_2];
	ld.param.u64 	%rd11, [TensorMaxPool_param_3];
	ld.param.u32 	%r51, [TensorMaxPool_param_4];
	ld.param.u32 	%r56, [TensorMaxPool_param_6];
	ld.param.u32 	%r52, [TensorMaxPool_param_7];
	ld.param.u32 	%r57, [TensorMaxPool_param_8];
	ld.param.u32 	%r53, [TensorMaxPool_param_9];
	ld.param.u32 	%r54, [TensorMaxPool_param_10];
	ld.param.u32 	%r55, [TensorMaxPool_param_11];
	mov.u32 	%r58, %ntid.x;
	mov.u32 	%r59, %ctaid.x;
	mov.u32 	%r60, %tid.x;
	mad.lo.s32 	%r61, %r59, %r58, %r60;
	mov.u32 	%r1, %ctaid.y;
	mov.u32 	%r2, %ntid.y;
	mov.u32 	%r3, %tid.y;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	div.s32 	%r5, %r61, %r52;
	rem.s32 	%r6, %r61, %r52;
	setp.lt.s32	%p1, %r5, %r56;
	setp.lt.s32	%p2, %r4, %r57;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB52_20;
	bra.uni 	BB52_1;

BB52_1:
	cvta.to.global.u64 	%rd12, %rd8;
	mad.lo.s32 	%r7, %r4, %r52, %r6;
	mul.lo.s32 	%r8, %r6, %r55;
	mul.wide.s32 	%rd13, %r5, 8;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.u64 	%rd15, [%rd14];
	cvta.to.global.u64 	%rd1, %rd15;
	cvta.to.global.u64 	%rd16, %rd9;
	add.s64 	%rd17, %rd16, %rd13;
	ld.global.u64 	%rd2, [%rd17];
	cvta.to.global.u64 	%rd18, %rd10;
	add.s64 	%rd19, %rd18, %rd13;
	ld.global.u64 	%rd3, [%rd19];
	cvta.to.global.u64 	%rd20, %rd11;
	add.s64 	%rd21, %rd20, %rd13;
	ld.global.u64 	%rd4, [%rd21];
	mov.f32 	%f32, 0f00800000;
	mov.u32 	%r108, -1;
	setp.lt.s32	%p4, %r53, 1;
	mov.u32 	%r109, %r108;
	@%p4 bra 	BB52_15;

	and.b32  	%r9, %r54, 3;
	mul.lo.s32 	%r11, %r55, %r4;
	mul.lo.s32 	%r12, %r4, %r55;
	mov.f32 	%f32, 0f00800000;
	mov.u32 	%r108, -1;
	mov.u32 	%r90, 0;
	mov.u32 	%r109, %r108;

BB52_3:
	setp.lt.s32	%p5, %r54, 1;
	@%p5 bra 	BB52_14;

	add.s32 	%r16, %r90, %r12;
	mul.lo.s32 	%r17, %r16, %r51;
	mov.u32 	%r93, 0;
	mov.f32 	%f15, 0f00000000;
	setp.eq.s32	%p6, %r9, 0;
	@%p6 bra 	BB52_5;

	setp.eq.s32	%p7, %r9, 1;
	@%p7 bra 	BB52_10;

	setp.eq.s32	%p8, %r9, 2;
	@%p8 bra 	BB52_9;

	add.s32 	%r74, %r8, %r17;
	mul.wide.s32 	%rd22, %r74, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.f32 	%f16, [%rd23];
	setp.gt.ftz.f32	%p9, %f16, %f32;
	setp.eq.s32	%p10, %r109, -1;
	or.pred  	%p11, %p9, %p10;
	selp.f32	%f32, %f16, %f32, %p11;
	selp.b32	%r109, %r16, %r109, %p11;
	selp.b32	%r108, %r8, %r108, %p11;
	mov.u32 	%r93, 1;

BB52_9:
	add.s32 	%r75, %r93, %r8;
	add.s32 	%r76, %r75, %r17;
	mul.wide.s32 	%rd24, %r76, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.f32 	%f17, [%rd25];
	setp.gt.ftz.f32	%p12, %f17, %f32;
	setp.eq.s32	%p13, %r109, -1;
	or.pred  	%p14, %p12, %p13;
	selp.f32	%f32, %f17, %f32, %p14;
	selp.b32	%r109, %r16, %r109, %p14;
	selp.b32	%r108, %r75, %r108, %p14;
	add.s32 	%r93, %r93, 1;

BB52_10:
	add.s32 	%r77, %r93, %r8;
	add.s32 	%r78, %r77, %r17;
	mul.wide.s32 	%rd26, %r78, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.f32 	%f18, [%rd27];
	setp.gt.ftz.f32	%p15, %f18, %f32;
	setp.eq.s32	%p16, %r109, -1;
	or.pred  	%p17, %p15, %p16;
	selp.f32	%f29, %f18, %f32, %p17;
	selp.b32	%r101, %r16, %r109, %p17;
	selp.b32	%r100, %r77, %r108, %p17;
	add.s32 	%r93, %r93, 1;
	mov.u32 	%r108, %r100;
	mov.u32 	%r109, %r101;
	mov.f32 	%f32, %f29;
	bra.uni 	BB52_11;

BB52_5:
	mov.u32 	%r100, %r108;
	mov.u32 	%r101, %r109;
	mov.f32 	%f29, %f32;
	mov.u32 	%r108, %r93;
	mov.u32 	%r109, %r93;
	mov.f32 	%f32, %f15;

BB52_11:
	setp.lt.u32	%p18, %r54, 4;
	@%p18 bra 	BB52_14;

	add.s32 	%r104, %r8, %r93;
	add.s32 	%r79, %r11, %r90;
	mad.lo.s32 	%r80, %r51, %r79, %r104;
	mul.wide.s32 	%rd28, %r80, 4;
	add.s64 	%rd38, %rd1, %rd28;
	mov.u32 	%r108, %r100;
	mov.u32 	%r109, %r101;
	mov.f32 	%f32, %f29;

BB52_13:
	ld.global.f32 	%f19, [%rd38];
	setp.gt.ftz.f32	%p19, %f19, %f32;
	setp.eq.s32	%p20, %r109, -1;
	or.pred  	%p21, %p19, %p20;
	selp.f32	%f20, %f19, %f32, %p21;
	selp.b32	%r81, %r16, %r109, %p21;
	selp.b32	%r82, %r104, %r108, %p21;
	ld.global.f32 	%f21, [%rd38+4];
	setp.gt.ftz.f32	%p22, %f21, %f20;
	setp.eq.s32	%p23, %r81, -1;
	or.pred  	%p24, %p22, %p23;
	selp.f32	%f22, %f21, %f20, %p24;
	selp.b32	%r83, %r16, %r81, %p24;
	add.s32 	%r84, %r104, 1;
	selp.b32	%r85, %r84, %r82, %p24;
	ld.global.f32 	%f23, [%rd38+8];
	setp.gt.ftz.f32	%p25, %f23, %f22;
	setp.eq.s32	%p26, %r83, -1;
	or.pred  	%p27, %p25, %p26;
	selp.f32	%f24, %f23, %f22, %p27;
	selp.b32	%r86, %r16, %r83, %p27;
	add.s32 	%r87, %r104, 2;
	selp.b32	%r88, %r87, %r85, %p27;
	ld.global.f32 	%f25, [%rd38+12];
	setp.gt.ftz.f32	%p28, %f25, %f24;
	setp.eq.s32	%p29, %r86, -1;
	or.pred  	%p30, %p28, %p29;
	selp.f32	%f32, %f25, %f24, %p30;
	selp.b32	%r109, %r16, %r86, %p30;
	add.s32 	%r89, %r104, 3;
	selp.b32	%r108, %r89, %r88, %p30;
	add.s32 	%r104, %r104, 4;
	add.s64 	%rd38, %rd38, 16;
	add.s32 	%r93, %r93, 4;
	setp.lt.s32	%p31, %r93, %r54;
	@%p31 bra 	BB52_13;

BB52_14:
	add.s32 	%r90, %r90, 1;
	setp.lt.s32	%p32, %r90, %r53;
	@%p32 bra 	BB52_3;

BB52_15:
	setp.eq.s64	%p33, %rd3, 0;
	@%p33 bra 	BB52_17;

	cvta.to.global.u64 	%rd29, %rd3;
	mul.wide.s32 	%rd30, %r7, 4;
	add.s64 	%rd31, %rd29, %rd30;
	st.global.u32 	[%rd31], %r109;

BB52_17:
	setp.eq.s64	%p34, %rd4, 0;
	@%p34 bra 	BB52_19;

	cvta.to.global.u64 	%rd32, %rd4;
	mul.wide.s32 	%rd33, %r7, 4;
	add.s64 	%rd34, %rd32, %rd33;
	st.global.u32 	[%rd34], %r108;

BB52_19:
	cvta.to.global.u64 	%rd35, %rd2;
	mul.wide.s32 	%rd36, %r7, 4;
	add.s64 	%rd37, %rd35, %rd36;
	st.global.f32 	[%rd37], %f32;

BB52_20:
	ret;
}

	// .globl	TensorReverseMaxPool
.visible .entry TensorReverseMaxPool(
	.param .u64 TensorReverseMaxPool_param_0,
	.param .u64 TensorReverseMaxPool_param_1,
	.param .u64 TensorReverseMaxPool_param_2,
	.param .u64 TensorReverseMaxPool_param_3,
	.param .u32 TensorReverseMaxPool_param_4,
	.param .u32 TensorReverseMaxPool_param_5,
	.param .u32 TensorReverseMaxPool_param_6,
	.param .u32 TensorReverseMaxPool_param_7,
	.param .u32 TensorReverseMaxPool_param_8
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd1, [TensorReverseMaxPool_param_0];
	ld.param.u64 	%rd2, [TensorReverseMaxPool_param_1];
	ld.param.u64 	%rd3, [TensorReverseMaxPool_param_2];
	ld.param.u64 	%rd4, [TensorReverseMaxPool_param_3];
	ld.param.u32 	%r4, [TensorReverseMaxPool_param_4];
	ld.param.u32 	%r6, [TensorReverseMaxPool_param_5];
	ld.param.u32 	%r7, [TensorReverseMaxPool_param_6];
	ld.param.u32 	%r5, [TensorReverseMaxPool_param_7];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r9, %r8, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	div.s32 	%r3, %r1, %r4;
	setp.lt.s32	%p1, %r3, %r7;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB53_2;
	bra.uni 	BB53_1;

BB53_1:
	cvta.to.global.u64 	%rd5, %rd1;
	rem.s32 	%r14, %r1, %r4;
	mad.lo.s32 	%r15, %r2, %r4, %r14;
	mul.wide.s32 	%rd6, %r3, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd9, %rd8;
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd6;
	ld.global.u64 	%rd12, [%rd11];
	cvta.to.global.u64 	%rd13, %rd12;
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd6;
	ld.global.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	cvta.to.global.u64 	%rd18, %rd4;
	add.s64 	%rd19, %rd18, %rd6;
	ld.global.u64 	%rd20, [%rd19];
	cvta.to.global.u64 	%rd21, %rd20;
	mul.wide.s32 	%rd22, %r15, 4;
	add.s64 	%rd23, %rd17, %rd22;
	add.s64 	%rd24, %rd21, %rd22;
	add.s64 	%rd25, %rd9, %rd22;
	ld.global.f32 	%f1, [%rd25];
	ld.global.u32 	%r16, [%rd23];
	ld.global.u32 	%r17, [%rd24];
	mad.lo.s32 	%r18, %r16, %r5, %r17;
	mul.wide.s32 	%rd26, %r18, 4;
	add.s64 	%rd27, %rd13, %rd26;
	st.global.f32 	[%rd27], %f1;

BB53_2:
	ret;
}


